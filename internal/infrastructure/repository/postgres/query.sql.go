// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addBook = `-- name: AddBook :one
INSERT INTO books (
    title, description,
    genre, author,
    date, numberPages
) VALUES (
    $1, $2,
    $3, $4,
    $5, $6
)
RETURNING id
`

type AddBookParams struct {
	Title       string
	Description string
	Genre       string
	Author      string
	Date        pgtype.Timestamp
	Numberpages int32
}

func (q *Queries) AddBook(ctx context.Context, arg AddBookParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, addBook,
		arg.Title,
		arg.Description,
		arg.Genre,
		arg.Author,
		arg.Date,
		arg.Numberpages,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const allBooks = `-- name: AllBooks :many
SELECT id, author, date, createdat, updatedat, title, description, genre, numberpages FROM books
`

func (q *Queries) AllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, allBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Date,
			&i.Createdat,
			&i.Updatedat,
			&i.Title,
			&i.Description,
			&i.Genre,
			&i.Numberpages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteBook = `-- name: DeleteBook :one
DELETE FROM books
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteBook(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteBook, id)
	err := row.Scan(&id)
	return id, err
}

const getBook = `-- name: GetBook :one
SELECT id, author, date, createdat, updatedat, title, description, genre, numberpages FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Date,
		&i.Createdat,
		&i.Updatedat,
		&i.Title,
		&i.Description,
		&i.Genre,
		&i.Numberpages,
	)
	return i, err
}
